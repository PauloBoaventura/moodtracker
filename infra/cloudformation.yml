AWSTemplateFormatVersion: 2010-09-09
Resources:
  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: MoodTrackerApi
      ProtocolType: HTTP
  ApiGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    DependsOn:
      - ApiMoodsResource
    Properties:
      ApiId: !Ref ApiGateway
      AutoDeploy: true
      StageName: prod
  ApiMoodsResource:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: GET /moods
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: mood_tracker_lambda_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: dynamodb:*
                Effect: Allow
                Resource: !GetAtt MoodsDynamoTable.Arn
  MoodsDynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: created_at
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: created_at
          KeyType: RANGE
      TableName: mood_tracker_moods
  LambdaMoodsGet:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          from boto3.dynamodb.conditions import Key
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('mood_tracker_moods')
          def handler(event, context):
            response = table.query(KeyConditionExpression=Key('userId').eq(event['userId']))
            return sorted(response['Items'], key=lambda x: x['dateUpdated'], reverse=True)
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
  LambdaMoodsPut:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('mood_tracker_moods')
          def handler(event, context):
            table.put_item(Item=event)
            return event
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
