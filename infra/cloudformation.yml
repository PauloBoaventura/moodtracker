AWSTemplateFormatVersion: 2010-09-09
Resources:
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MoodTrackerApi
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMoodsGet
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod
  ApiGatewayMoodResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: moods
      RestApiId: !Ref ApiGateway
  ApiGatewayMoodsGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://localhost:1234'"
            StatusCode: 200
        Type: AWS
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaMoodsGet.Arn}/invocations'
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: 200
      ResourceId: !Ref ApiGatewayMoodResource
      RestApiId: !Ref ApiGateway
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: mood_tracker_lambda_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: dynamodb:*
                Effect: Allow
                Resource: !GetAtt MoodsDynamoTable.Arn
  MoodsDynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: created_at
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: created_at
          KeyType: RANGE
      TableName: mood_tracker_moods
  LambdaMoodsGet:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('mood_tracker_moods')
          def handler(event, context):
            response = table.scan()
            return response['Items']
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
  LambdaMoodsGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaMoodsGet.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'
  LambdaMoodsPut:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('mood_tracker_moods')
          def handler(event, context):
            table.put_item(Item=event)
            return event
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
  LambdaMoodsPutPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaMoodsPut.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'
