AWSTemplateFormatVersion: 2010-09-09
Resources:
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MoodTrackerApi
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMoodsGet
      - ApiGatewayMoodsPut
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod
  ApiGatewayMoodResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: moods
      RestApiId: !Ref ApiGateway
  ApiGatewayMoodsGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaMoodsGet.Arn}/invocations'
      ResourceId: !Ref ApiGatewayMoodResource
      RestApiId: !Ref ApiGateway
  ApiGatewayMoodsPut:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: PUT
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaMoodsPut.Arn}/invocations'
      ResourceId: !Ref ApiGatewayMoodResource
      RestApiId: !Ref ApiGateway
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      UserPoolName: moodtracker
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_LINK
        EmailMessageByLink: '{##Follow this link##} to complete your signup with Webnotes'
        EmailSubjectByLink: MoodTracker email verification
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: moodtracker_lambda_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: dynamodb:*
                Effect: Allow
                Resource: !GetAtt MoodsDynamoTable.Arn
  MoodsDynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: createdAt
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: createdAt
          KeyType: RANGE
      TableName: moodtracker_moods
  LambdaMoodsGet:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          headers = {'Access-Control-Allow-Origin': 'http://localhost:1234'}
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('moodtracker_moods')
          def handler(event, context):
            try:
              items = table.scan()['Items']
              for item in items:
                item['mood'] = int(item['mood'])
              return {
                'body': json.dumps(items),
                'headers': headers,
                'statusCode': 200,
              }
            except Exception as e:
              print(e)
              return {
                'body': 'Internal server error',
                'headers': headers,
                'statusCode': 500,
              }
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
  LambdaMoodsGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaMoodsGet.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'
  LambdaMoodsPut:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          headers = {'Access-Control-Allow-Origin': 'http://localhost:1234'}
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('moodtracker_moods')
          def handler(event, context):
            try:
              table.put_item(Item=json.loads(event['body']))
              return {
                'body': event['body'],
                'headers': headers,
                'statusCode': 200,
              }
            except Exception as e:
              print(e)
              return {
                'body': 'Internal server error',
                'headers': headers,
                'statusCode': 500,
              }
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
  LambdaMoodsPutPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaMoodsPut.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'
