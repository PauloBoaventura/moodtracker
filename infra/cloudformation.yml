AWSTemplateFormatVersion: 2010-09-09
Outputs:
  ApiGatewayDeployCommand:
    Value: !Sub 'aws apigateway create-deployment --rest-api-id ${ApiGateway} --stage-name prod | cat'
  ApiGatewayUrl:
    Value: !Sub 'https://${ApiGateway}.execute-api.us-east-1.amazonaws.com/prod'
  CognitoClientId:
    Value: !Ref CognitoUserPoolClient
  CognitoUserPoolId:
    Value: !Ref CognitoUserPool
Resources:
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MoodTrackerApi
  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      IdentitySource: method.request.header.Authorization
      Name: CognitoUserPoolAuthorizer
      ProviderARNs:
        - !GetAtt CognitoUserPool.Arn
      RestApiId: !Ref ApiGateway
      Type: COGNITO_USER_POOLS
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMoodsDelete
      - ApiGatewayMoodsGet
      - ApiGatewayMoodsOptions
      - ApiGatewayMoodsPut
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod
  ApiGatewayMoodResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: moods
      RestApiId: !Ref ApiGateway
  ApiGatewayMoodsGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaMoodsGet.Arn}/invocations'
      ResourceId: !Ref ApiGatewayMoodResource
      RestApiId: !Ref ApiGateway
  ApiGatewayMoodsDelete:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      HttpMethod: DELETE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaMoodsDelete.Arn}/invocations'
      ResourceId: !Ref ApiGatewayMoodResource
      RestApiId: !Ref ApiGateway
  ApiGatewayMoodsOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'http://localhost:1234'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      ResourceId: !Ref ApiGatewayMoodResource
      RestApiId: !Ref ApiGateway
  ApiGatewayMoodsPut:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      HttpMethod: PUT
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaMoodsPut.Arn}/invocations'
      ResourceId: !Ref ApiGatewayMoodResource
      RestApiId: !Ref ApiGateway
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      UserPoolName: moodtracker
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_LINK
        EmailMessageByLink: '{##Follow this link##} to complete your signup with MoodTracker'
        EmailSubjectByLink: MoodTracker email verification
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      PreventUserExistenceErrors: ENABLED
      UserPoolId: !Ref CognitoUserPool
  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: moodtracker
      UserPoolId: !Ref CognitoUserPool
  DynamoMoodsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: createdAt
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: createdAt
          KeyType: RANGE
      TableName: moodtracker_moods
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: moodtracker_lambda_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: dynamodb:*
                Effect: Allow
                Resource: !GetAtt DynamoMoodsTable.Arn
  LambdaMoodsDelete:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          headers = { 'Access-Control-Allow-Origin': 'http://localhost:1234' }
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('moodtracker_moods')
          def handler(event, context):
            user_id = event['requestContext']['authorizer']['claims']['sub']
            try:
              created_ats = json.loads(event['body'])
              with table.batch_writer() as batch:
                for created_at in created_ats:
                  batch.delete_item(Key={'createdAt': created_at, 'userId': user_id})
              return { 'headers': headers, 'statusCode': 204 }
            except Exception as e:
              print(e)
              return {
                'body': 'Internal server error',
                'headers': headers,
                'statusCode': 500,
              }
      FunctionName: MoodTrackerMoodsDelete
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
  LambdaMoodsDeletePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaMoodsDelete.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'
  LambdaMoodsGet:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          from boto3.dynamodb.conditions import Key
          headers = { 'Access-Control-Allow-Origin': 'http://localhost:1234' }
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('moodtracker_moods')
          def handler(event, context):
            user_id = event['requestContext']['authorizer']['claims']['sub']
            try:
              response = table.query(KeyConditionExpression=Key('userId').eq(user_id))
              moods = response['Items']
              for mood in moods:
                del mood['userId']
                mood['mood'] = int(mood['mood'])
              return {
                'body': json.dumps(moods),
                'headers': headers,
                'statusCode': 200,
              }
            except Exception as e:
              print(e)
              return {
                'body': 'Internal server error',
                'headers': headers,
                'statusCode': 500,
              }
      FunctionName: MoodTrackerMoodsGet
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
  LambdaMoodsGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaMoodsGet.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'
  LambdaMoodsPut:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          headers = { 'Access-Control-Allow-Origin': 'http://localhost:1234' }
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('moodtracker_moods')
          def handler(event, context):
            user_id = event['requestContext']['authorizer']['claims']['sub']
            try:
              moods = json.loads(event['body'])
              with table.batch_writer() as batch:
                for mood in moods:
                  mood['userId'] = user_id
                  batch.put_item(Item=mood)
              return { 'headers': headers, 'statusCode': 204 }
            except Exception as e:
              print(e)
              return {
                'body': 'Internal server error',
                'headers': headers,
                'statusCode': 500,
              }
      FunctionName: MoodTrackerMoodsPut
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
  LambdaMoodsPutPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaMoodsPut.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'
